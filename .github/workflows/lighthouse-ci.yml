name: Lighthouse CI

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      url:
        description: "URL to run Lighthouse CI on"
        required: true
        default: "https://mohamedtahiri.vercel.app"

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for Vercel deployment
        if: github.event_name == 'push'
        uses: patrickedqvist/wait-for-vercel-preview@v1.3.1
        id: vercel_preview_url
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          max_timeout: 180
          environment: production
          check_interval: 10

      - name: Run Lighthouse CI
        id: lighthouse
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.url || steps.vercel_preview_url.outputs.url }}
          configPath: ./lighthouserc.json
          uploadArtifacts: false
          temporaryPublicStorage: false

      - name: Extract Lighthouse scores
        id: scores
        run: |
          echo "Extracting Lighthouse scores..."

          # Parse the lighthouse results and extract scores
          PERF=$(echo '${{ steps.lighthouse.outputs.manifest }}' | jq -r '.[0].summary.performance')
          ACCESSIBILITY=$(echo '${{ steps.lighthouse.outputs.manifest }}' | jq -r '.[0].summary.accessibility')
          BEST_PRACTICES=$(echo '${{ steps.lighthouse.outputs.manifest }}' | jq -r '.[0].summary["best-practices"]')
          SEO=$(echo '${{ steps.lighthouse.outputs.manifest }}' | jq -r '.[0].summary.seo')

          # Convert to percentage
          PERF_PERCENT=$(echo "scale=0; $PERF * 100" | bc)
          ACCESSIBILITY_PERCENT=$(echo "scale=0; $ACCESSIBILITY * 100" | bc)
          BEST_PRACTICES_PERCENT=$(echo "scale=0; $BEST_PRACTICES * 100" | bc)
          SEO_PERCENT=$(echo "scale=0; $SEO * 100" | bc)

          # Calculate average for color determination
          AVERAGE=$(echo "scale=0; ($PERF + $ACCESSIBILITY + $BEST_PRACTICES + $SEO) * 25" | bc)

          echo "performance=$PERF_PERCENT" >> $GITHUB_OUTPUT
          echo "accessibility=$ACCESSIBILITY_PERCENT" >> $GITHUB_OUTPUT
          echo "best_practices=$BEST_PRACTICES_PERCENT" >> $GITHUB_OUTPUT
          echo "seo=$SEO_PERCENT" >> $GITHUB_OUTPUT
          echo "average=$AVERAGE" >> $GITHUB_OUTPUT
          echo "url=${{ steps.vercel_preview_url.outputs.url }}" >> $GITHUB_OUTPUT

      - name: Determine embed color
        id: color
        run: |
          AVERAGE=${{ steps.scores.outputs.average }}
          if [ $AVERAGE -ge 90 ]; then
            echo "color=3066993" >> $GITHUB_OUTPUT  # Green
          elif [ $AVERAGE -ge 70 ]; then
            echo "color=15844367" >> $GITHUB_OUTPUT # Orange
          else
            echo "color=15158332" >> $GITHUB_OUTPUT # Red
          fi

      - name: Send Discord notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            {
              "embeds": [{
                "title": "üöÄ Lighthouse CI Results",
                "description": "Performance audit completed for the latest deployment",
                "color": ${{ steps.color.outputs.color }},
                "fields": [
                  {
                    "name": "üéØ Performance",
                    "value": "${{ steps.scores.outputs.performance }}%",
                    "inline": true
                  },
                  {
                    "name": "‚ôø Accessibility",
                    "value": "${{ steps.scores.outputs.accessibility }}%",
                    "inline": true
                  },
                  {
                    "name": "‚úÖ Best Practices",
                    "value": "${{ steps.scores.outputs.best_practices }}%",
                    "inline": true
                  },
                  {
                    "name": "üîç SEO",
                    "value": "${{ steps.scores.outputs.seo }}%",
                    "inline": true
                  },
                  {
                    "name": "üåê Deployed URL",
                    "value": "${{ steps.scores.outputs.url }}",
                    "inline": false
                  }
                ],
                "footer": {
                  "text": "Portfolio CI/CD ‚Ä¢ ${{ github.sha }}"
                },
                "timestamp": "${{ github.event.head_commit.timestamp }}"
              }]
            }
